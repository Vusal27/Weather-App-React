{"version":3,"sources":["components/info.js","components/form.js","components/result.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","type","name","placeholder","Result","className","city","country","temp","sunrise","sunset","error","API_KEY","App","state","undefined","arror","gettingWeather","_callee","e","api_url","data","sunriseDate","convertSunriseDate","sunsetDate","convertSunsetDate","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","cod","sys","Date","setTime","getHours","getMinutes","getSeconds","_this","setState","main","stop","_this$state","this","info","components_form","result","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d92439d7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Узнайте погоду в любом городе мира!</h2>\r\n        <p>Просто введите название города.</p>\r\n    </div>\r\n);\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Название города\"/>\r\n        <button>Узнать погоду</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Result = props => (\r\n    <div className=\"result\">\r\n    { props.city && \r\n        <div>\r\n            <p className=\"result__item\">Местоположение: {props.city}, {props.country}</p>\r\n            <p className=\"result__item\">Температура: {props.temp}&#176;</p>\r\n            <p className=\"result__item\">Восход солнца: {props.sunrise}</p>\r\n            <p className=\"result__item\">Заход солнца: {props.sunset}</p>\r\n        </div>\r\n    }\r\n    <p className=\"error\">{ props.error}</p>\r\n    </div>\r\n);\r\n\r\nexport default Result;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Result from \"./components/result\";\nimport \"./App.css\";\n\nconst API_KEY = \"02b088cdfc3e02960f9df92df055cd92\";\nclass App extends React.Component {\n\t\n\tstate = {\n\t\ttemp: undefined,\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\tsunrise: undefined,\n\t\tsunset: undefined,\n\t\tarror: undefined\n\t}\n\n  \tgettingWeather = async (e) => {\n\t\te.preventDefault();\n\t\tlet city = e.target.elements.city.value;\n\t\te.target.elements.city.value = '';\n\n\t\tif (city) {\n\t\t\tconst api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n\t\t\tconst data = await api_url.json();\n\t\t\tif (data.cod === 200) {\n\t\t\t\tlet sunrise = data.sys.sunrise*1000;\n\t\t\t\tlet sunriseDate = new Date();\n\t\t\t\tsunriseDate.setTime(sunrise);\n\t\t\t\tlet convertSunriseDate = `${sunriseDate.getHours()}:${sunriseDate.getMinutes()}:${sunriseDate.getSeconds()}`;\n\t\n\t\t\t\tlet sunset = data.sys.sunset*1000;\n\t\t\t\tlet sunsetDate = new Date();\n\t\t\t\tsunsetDate.setTime(sunset);\n\t\t\t\t\n\t\t\t\tlet convertSunsetDate = `${sunsetDate.getHours()}:${sunsetDate.getMinutes()}:${sunsetDate.getSeconds()}`;\n\t\n\t\t\t\tthis.setState({\n\t\t\t\t\ttemp: data.main.temp,\n\t\t\t\t\tcity: data.name,\n\t\t\t\t\tcountry: data.sys.country,\n\t\t\t\t\tsunrise: convertSunriseDate,\n\t\t\t\t\tsunset: convertSunsetDate,\n\t\t\t\t\terror: undefined\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttemp: undefined,\n\t\t\t\t\tcity: undefined,\n\t\t\t\t\tcountry: undefined,\n\t\t\t\t\tsunrise: undefined,\n\t\t\t\t\tsunset: undefined,\n\t\t\t\t\terror: \"Город не найден!\"\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\ttemp: undefined,\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\tsunrise: undefined,\n\t\t\t\tsunset: undefined,\n\t\t\t\terror: \"Название города не введено!\"\n\t\t\t});\n\t\t}\t\t\n \t}\n\n  \trender() {\n\t\t  const {temp, city, country, sunrise, sunset, error } = this.state;\n    \treturn (\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<Info />\n\t\t\t\t<div>\n\t\t\t\t\t<Form weatherMethod={this.gettingWeather} />\n\t\t\t\t\t<Result\n\t\t\t\t\ttemp={temp}\n\t\t\t\t\tcity={city}\n\t\t\t\t\tcountry={country}\n\t\t\t\t\tsunrise={sunrise}\n\t\t\t\t\tsunset={sunset}\n\t\t\t\t\terror={error}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n    \t);\n  \t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}